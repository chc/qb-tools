cmake_minimum_required(VERSION 3.24)
project(qbtools)

set (CMAKE_CXX_STANDARD 11)


set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(QBTOOLS_BUILD_TYPE STREQUAL "thug") #thug / thug2 - to actually properly use thug qcomp needs the -oldifs flag
    add_definitions(-DISTREAM_TOKEN_ENDIAN=ISTREAM_LITTLE_ENDIAN)
    add_definitions(-DISTREAM_PRE_ENDIAN=ISTREAM_LITTLE_ENDIAN)
    set(QBTOOLS_BUILD_CHUNKER OFF)
    set(QBTOOLS_BUILD_SYMBOLTOOLS OFF)
    set(QBTOOLS_BUILD_PAKTOOLS OFF)
    set(QBTOOLS_BUILD_PRETOOLS ON)

    #temporarily needed...
    add_definitions(-DISTREAM_SYMBOL_ENDIAN=ISTREAM_LITTLE_ENDIAN)
    add_definitions(-DPAK_FLAGS_HAS_FILENAME=0x20)
    add_definitions(-DISTREAM_PAK_ENDIAN=ISTREAM_LITTLE_ENDIAN)
    add_definitions(-DPAK_LAST_ITEM="last")
elseif(QBTOOLS_BUILD_TYPE STREQUAL "thawpc")
    add_definitions(-DISTREAM_PAK_ENDIAN=ISTREAM_LITTLE_ENDIAN)
    add_definitions(-DISTREAM_SYMBOL_ENDIAN=ISTREAM_LITTLE_ENDIAN)
    add_definitions(-DISTREAM_TOKEN_ENDIAN=ISTREAM_LITTLE_ENDIAN)
    add_definitions(-DSYMBOL_STRUCT_FLAG=0x01)
    add_definitions(-DSYMBOL_ROOT_FLAG=0x04)
    add_definitions(-DSYMBOL_ISREF_FLAG=0x80)
    add_definitions(-DSYMBOL_STRUCT_TYPE_ANDMASK=0x1E)
    add_definitions(-DSYMBOL_STRUCT_TYPE_RSHIFTMASK=1)
    add_definitions(-DPAK_FLAGS_HAS_FILENAME=0x20)
    add_definitions(-DPAK_INCLUDE_FILENAME)
    add_definitions(-DPAK_LAST_ITEM="last")
    set(QBTOOLS_BUILD_CHUNKER OFF)
    set(QBTOOLS_BUILD_SYMBOLTOOLS ON)
    set(QBTOOLS_BUILD_PAKTOOLS ON)
elseif(QBTOOLS_BUILD_TYPE STREQUAL "thp8")
    add_definitions(-DISTREAM_PAK_ENDIAN=ISTREAM_BIG_ENDIAN)
    add_definitions(-DISTREAM_SYMBOL_ENDIAN=ISTREAM_BIG_ENDIAN)
    add_definitions(-DISTREAM_TOKEN_ENDIAN=ISTREAM_LITTLE_ENDIAN)
    add_definitions(-DSYMBOL_STRUCT_FLAG=0x80)
    add_definitions(-DSYMBOL_ROOT_FLAG=0x20)
    add_definitions(-DSYMBOL_ISREF_FLAG=0x10)
    add_definitions(-DARRAY_HEADER_VALUE=1)
    add_definitions(-DSYMBOL_STRUCT_TYPE_ANDMASK=0x0F)
    add_definitions(-DSYMBOL_STRUCT_TYPE_RSHIFTMASK=0)
    add_definitions(-DWIDE_LOCALSTRING=1)
    add_definitions(-DPAK_FLAGS_HAS_FILENAME=0x20)
    add_definitions(-DPAK_LAST_ITEM="last")
    set(QBTOOLS_BUILD_CHUNKER ON)
    set(QBTOOLS_BUILD_SYMBOLTOOLS ON)
    set(QBTOOLS_BUILD_PAKTOOLS ON)
elseif(QBTOOLS_BUILD_TYPE STREQUAL "thpg" OR QBTOOLS_BUILD_TYPE STREQUAL "gh3")
    add_definitions(-DISTREAM_PAK_ENDIAN=ISTREAM_BIG_ENDIAN)
    add_definitions(-DISTREAM_SYMBOL_ENDIAN=ISTREAM_BIG_ENDIAN)
    add_definitions(-DISTREAM_TOKEN_ENDIAN=ISTREAM_LITTLE_ENDIAN)
    add_definitions(-DSYMBOL_STRUCT_FLAG=0x80)
    add_definitions(-DSYMBOL_ROOT_FLAG=0x20)
    add_definitions(-DSYMBOL_ISREF_FLAG=0x10)
    add_definitions(-DARRAY_HEADER_VALUE=1)
    add_definitions(-DSYMBOL_STRUCT_TYPE_ANDMASK=0x0F)
    add_definitions(-DSYMBOL_STRUCT_TYPE_RSHIFTMASK=0)
    add_definitions(-DWIDE_LOCALSTRING=1)
    add_definitions(-DPAK_FLAGS_HAS_FILENAME=0x20)
    add_definitions(-DPAK_LAST_ITEM=".last")
    set(QBTOOLS_BUILD_CHUNKER ON)
    set(QBTOOLS_BUILD_SYMBOLTOOLS ON)
    set(QBTOOLS_BUILD_PAKTOOLS ON)
elseif(QBTOOLS_BUILD_TYPE STREQUAL "gh4")
    add_definitions(-DISTREAM_PAK_ENDIAN=ISTREAM_BIG_ENDIAN)
    add_definitions(-DISTREAM_SYMBOL_ENDIAN=ISTREAM_BIG_ENDIAN)
    add_definitions(-DISTREAM_TOKEN_ENDIAN=ISTREAM_LITTLE_ENDIAN)
    add_definitions(-DSYMBOL_STRUCT_FLAG=0x01)
    add_definitions(-DSYMBOL_ROOT_FLAG=0x20)
    add_definitions(-DSYMBOL_ISREF_FLAG=0x10)
    add_definitions(-DARRAY_HEADER_VALUE=1)
    add_definitions(-DSYMBOL_STRUCT_TYPE_ANDMASK=0x0F)
    add_definitions(-DSYMBOL_STRUCT_TYPE_RSHIFTMASK=0)
    add_definitions(-DWIDE_LOCALSTRING=1)
    add_definitions(-DPAK_FLAGS_HAS_FILENAME=0x20)
    add_definitions(-DSYMBOL_STRUCT_SEPERATE_FLAGS)
    add_definitions(-DSYMBOL_STRUCT_REQUIRED_PARAM_FLAG=0x20)
    add_definitions(-DPAK_LAST_ITEM=".last")
    set(QBTOOLS_BUILD_CHUNKER ON)
    set(QBTOOLS_BUILD_SYMBOLTOOLS ON)
    set(QBTOOLS_BUILD_PAKTOOLS ON)
elseif(QBTOOLS_BUILD_TYPE STREQUAL "gh5")
    add_definitions(-DISTREAM_PAK_ENDIAN=ISTREAM_BIG_ENDIAN)
    add_definitions(-DISTREAM_SYMBOL_ENDIAN=ISTREAM_BIG_ENDIAN)
    add_definitions(-DISTREAM_TOKEN_ENDIAN=ISTREAM_LITTLE_ENDIAN)
    add_definitions(-DSYMBOL_STRUCT_FLAG=0x01)
    add_definitions(-DSYMBOL_ROOT_FLAG=0x20)
    add_definitions(-DSYMBOL_ISREF_FLAG=0x10)
    add_definitions(-DARRAY_HEADER_VALUE=1)
    add_definitions(-DSYMBOL_STRUCT_TYPE_ANDMASK=0x0F)
    add_definitions(-DSYMBOL_STRUCT_TYPE_RSHIFTMASK=0)
    add_definitions(-DWIDE_LOCALSTRING=1)
    add_definitions(-DPAB_ABSOLUTE_OFFSET)
    add_definitions(-DSYMBOL_STRUCT_SEPERATE_FLAGS)
    add_definitions(-DSYMBOL_STRUCT_REQUIRED_PARAM_FLAG=0x20)
    add_definitions(-DWOR_SYMBOLDUMP_HEADER)
    add_definitions(-DPAK_FLAGS_HAS_FILENAME=0x20)
    add_definitions(-DPAK_LAST_ITEM=".last")
    set(QBTOOLS_BUILD_SYMBOLTOOLS ON)
    set(QBTOOLS_BUILD_CHUNKER ON)
    set(QBTOOLS_BUILD_PAKTOOLS ON)
else()
    message(FATAL_ERROR "Unknown build type")
endif()

if(QBTOOLS_BUILD_SYMBOLTOOLS)
    add_definitions(-DWITH_SYMBOL_SUPPORT)
    include_directories("src/include" "src/libs/qtoken" "src/libs/qsymbol" "src/libs/pak" "src/libs/dbginfo" "src/libs/crc" "src/libs/lzss")
else()
    include_directories("src/include" "src/libs/qtoken" "src/libs/pak" "src/libs/dbginfo" "src/libs/crc" "src/libs/lzss")
endif()

file (GLOB CRC_SRCS "src/libs/crc/*.cpp")
add_library(crc ${CRC_SRCS})
target_link_libraries(crc)

file (GLOB LZSS_SRCS "src/libs/lzss/*.cpp")
add_library(lzss ${LZSS_SRCS})
target_link_libraries(lzss)

file (GLOB QTOKEN_SRCS "src/libs/qtoken/*.cpp" "src/libs/qtoken/*.cpp")
add_library(qtoken ${QTOKEN_SRCS})
target_link_libraries(qtoken)

if(QBTOOLS_BUILD_SYMBOLTOOLS)
    file (GLOB QSYMBOL_SRCS "src/libs/qsymbol/*.cpp" "src/libs/qsymbol/*.cpp")
    add_library(qsymbol ${QSYMBOL_SRCS})
    target_link_libraries(qsymbol lzss)
endif()

file (GLOB QDUMP_SRCS "src/tools/qdump/*.cpp")
add_executable (qdump ${QDUMP_SRCS})
if(QBTOOLS_BUILD_SYMBOLTOOLS)
    target_link_libraries(qdump qtoken qsymbol crc)
else()
    target_link_libraries(qdump qtoken crc)
endif()
INSTALL(TARGETS qdump)

file (GLOB QCOMP_SRCS "src/tools/qcomp/*.cpp")
source_group("Sources" FILES ${QCOMP_SRCS})
add_executable (qcomp ${QCOMP_SRCS})
if(QBTOOLS_BUILD_SYMBOLTOOLS)
    target_link_libraries(qcomp qtoken qsymbol crc)
else()
    target_link_libraries(qcomp qtoken crc)
endif()
INSTALL(TARGETS qcomp)

if(QBTOOLS_BUILD_SYMBOLTOOLS)
    file (GLOB QDEOPT_SRCS "src/tools/qdeopt/*.cpp")
    source_group("Sources" FILES ${QDEOPT_SRCS})
    add_executable (qdeopt ${QDEOPT_SRCS})
    target_link_libraries(qdeopt qtoken qsymbol dbginfo pak crc lzss)
    INSTALL(TARGETS qdeopt)

    file (GLOB QOPT_SRCS "src/tools/qopt/*.cpp")
    source_group("Sources" FILES ${QOPT_SRCS})
    add_executable (qopt ${QOPT_SRCS})
    target_link_libraries(qopt qtoken qsymbol dbginfo pak crc lzss)
    INSTALL(TARGETS qopt)
endif()


if(QBTOOLS_BUILD_PRETOOLS)
# target_include_directories
    file (GLOB LIBPRE_SRCS "src/libs/pre/*.cpp")
    include_directories("src/libs/pre")
    add_library(pre ${LIBPRE_SRCS})
    target_link_libraries(pre qtoken lzss)
    INSTALL(TARGETS pre)


    file (GLOB PREDIR_SRCS "src/tools/predir/*.cpp")
    source_group("Sources" FILES ${PREDIR_SRCS})
    add_executable (predir ${PREDIR_SRCS})
    target_link_libraries(predir pre)
    INSTALL(TARGETS predir)

    file (GLOB UNPRE_SRCS "src/tools/unpre/*.cpp")
    source_group("Sources" FILES ${UNPRE_SRCS})
    add_executable (unpre ${UNPRE_SRCS})
    target_link_libraries(unpre pre)
    INSTALL(TARGETS unpre)
endif()


file (GLOB LIBPAK_SRCS "src/libs/pak/*.cpp")
include_directories("src/libs/pak")
add_library(pak ${LIBPAK_SRCS})
target_link_libraries(pak qtoken)
INSTALL(TARGETS pak)

file (GLOB LIBDBGINFO_SRCS "src/libs/dbginfo/*.cpp")
add_library(dbginfo ${LIBDBGINFO_SRCS})
target_link_libraries(dbginfo pak)

if(QBTOOLS_BUILD_PAKTOOLS)
    file (GLOB UNPAK_SRCS "src/tools/unpak/*.cpp")
    source_group("Sources" FILES ${UNPAK_SRCS})
    add_executable (unpak ${UNPAK_SRCS})
    target_link_libraries(unpak pak qtoken dbginfo)
    INSTALL(TARGETS unpak)

    file (GLOB PAK_SRCS "src/tools/pakdir/*.cpp")
    source_group("Sources" FILES ${PAK_SRCS})
    add_executable (pakdir ${PAK_SRCS})
    target_link_libraries(pakdir pak qtoken dbginfo crc)
    INSTALL(TARGETS pakdir)
endif()



file (GLOB QRESOLVE_SRCS "src/tools/qresolve/*.cpp")
source_group("Sources" FILES ${QRESOLVE_SRCS})
add_executable (qresolve ${QRESOLVE_SRCS})
target_link_libraries(qresolve qtoken pak dbginfo)
INSTALL(TARGETS qresolve)


file (GLOB QGENNAME_SRCS "src/tools/qgenname/*.cpp")
source_group("Sources" FILES ${QGENNAME_SRCS})
add_executable (qgenname ${QGENNAME_SRCS})
target_link_libraries(qgenname crc)
INSTALL(TARGETS qgenname)

if(QBTOOLS_BUILD_SYMBOLTOOLS)
    file (GLOB QOFFDUMP_SYM_SRCS "src/tools/qoffdump/qoffdump_symbol.cpp" "src/tools/qoffdump/shared.cpp")
    add_executable (qoffdump_symbol ${QOFFDUMP_SYM_SRCS})
    target_link_libraries(qoffdump_symbol qtoken qsymbol crc)
    INSTALL(TARGETS qoffdump_symbol)
endif()

file (GLOB QOFFDUMP_TOKEN_SRCS "src/tools/qoffdump/qoffdump_token.cpp" "src/tools/qoffdump/shared.cpp")
add_executable (qoffdump_token ${QOFFDUMP_TOKEN_SRCS})
if(QBTOOLS_BUILD_SYMBOLTOOLS)
    target_link_libraries(qoffdump_token qtoken qsymbol crc)
else()
    target_link_libraries(qoffdump_token qtoken)
endif()
INSTALL(TARGETS qoffdump_token)


if(QBTOOLS_BUILD_CHUNKER)
    find_package(ZLIB REQUIRED)
    file (GLOB UNCHUNK_SRCS "src/tools/unchunk/*.cpp")
    add_executable (unchunk ${UNCHUNK_SRCS})
    target_link_libraries(unchunk PRIVATE qtoken ZLIB::ZLIB)

    file (GLOB CHUNK_SRCS "src/tools/chunk/*.cpp")
    add_executable (chunk ${CHUNK_SRCS})
    target_link_libraries(chunk PRIVATE qtoken ZLIB::ZLIB)
endif()



#INSTALL(TARGETS qcomp qdump qopt qdeopt qgenname qresolve pakdir unpak unchunk chunk)